#!groovy

import groovy.json.JsonSlurperClassic

node {

    def SF_CONSUMER_KEY          = env.SF_CONSUMER_KEY_LIVE;        
    def SF_USERNAME              = env.SF_USERNAME_LIVE;           
    def SERVER_KEY_CREDENTALS_ID = env.SERVER_KEY_CREDENTALS_ID_LIVE;
    def SF_INSTANCE_URL          = env.SF_INSTANCE_URL_LIVE;        
    def TEST_LEVEL               = "RunLocalTests";

    def toolbelt = tool "toolbelt";
	
	def dirName                  = env.WORKSPACE;
	def WORKSPACE_NAME_QA        = env.WORKSPACE_NAME_QA;
	def QA_BUILD_PARAM           = params.Build;
	dirName = dirName.replace(JOB_NAME,'');
	def build_directory = "${dirName}${WORKSPACE_NAME_QA}\\build\\force-app_v_${QA_BUILD_PARAM}\\.";

	println "printing information of env variable";
	print "SF_CONSUMER_KEY :${SF_CONSUMER_KEY}";
	print "SF_USERNAME :${SF_USERNAME}";
	print "SERVER_KEY_CREDENTALS_ID :${SERVER_KEY_CREDENTALS_ID}";
	print "TEST_LEVEL :${TEST_LEVEL}";
	print "SF_INSTANCE_URL :${SF_INSTANCE_URL}";
	print "Directory Name : ${build_directory}";

    // -------------------------------------------------------------------------
    // Check out code from source control.
    // -------------------------------------------------------------------------
	
    stage("checkout source") {
        checkout scm
    }

	withEnv(["HOME=${env.WORKSPACE}"]) {
		
	withCredentials([file(credentialsId: SERVER_KEY_CREDENTALS_ID, variable: "jwt_key_file")]) {
            	/*Step-1: Authorize Org*/
		stage("Authorize Org") {
              	 rc = command  "\"${toolbelt}\" force:org:list"
              	 rc = command  "\"${toolbelt}\" force:auth:logout -u ${SF_USERNAME} -p"
                 rc = command  "\"${toolbelt}\" force:auth:jwt:grant --instanceurl ${SF_INSTANCE_URL} --clientid ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --jwtkeyfile \"${jwt_key_file}\" --setdefaultdevhubusername --setalias HubOrg";
                 if (rc != 0) {
                    error "Salesforce authorization failed."
                 }
            }
            
            /* Step:2 Convert to the Org Metadata

            stage("Convert to Org Metadata"){
                rc = command "\"${toolbelt}\" force:source:convert -r force-app -d build/force-app_v_${env.BUILD_NUMBER}"
                if (rc != 0) {
                    error "Convert source code to metadata failed."
                }
            }
            */

            /*Step:3 Validate First Deploy Code to Org
            * -l  = testLevel
            * -w  = -1 Until the validate finish
            * -u  = target org
            * -d  = dir to deploy
            * -c  = if present "check only give the validated changeset name" else deployed direclty 
            */

            stage("Deploy Code to target org"){
                rc = command "\"${toolbelt}\" force:mdapi:deploy -d \"${build_directory}\" -u ${SF_USERNAME} -l ${TEST_LEVEL} -w -1 ";
                if (rc != 0) {
                    error "Salesforce deployment failed in the org."
                }
            }

             /*Step:4 Deployement Status in Org*/
             stage("Deployment Status Report"){
                rc = command "\"${toolbelt}\" force:mdapi:deploy:report -u ${SF_USERNAME}"
                if (rc != 0) {
                    error "Salesforce test scratch org deletion failed."
                }
            }
		}
	}
}

def command(script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script);
    } else {
        return bat(returnStatus: true, script: script);
    }
}

def commandOutput(script) {
    if (isUnix()) {
        rmsg =  sh(returnStdout: true, script: script);
    } else {
        rmsg =  bat(returnStdout: true, script: script);
        rmsg = rmsg.readLines().drop(1).join(" ");
    }
    def index = rmsg.indexOf('json') + 4;
    def len   = rmsg.length();
    def json  = rmsg.substring(index,len);
    println json;
    def jsonSlurper = new JsonSlurperClassic();
    def response = jsonSlurper.parseText(json);
    return response;
}