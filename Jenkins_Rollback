#!groovy

import groovy.json.JsonSlurperClassic

node {
	
	def evnRollBack = params.Environment;

    def SF_CONSUMER_KEY;         
    def SF_USERNAME;             
    def SERVER_KEY_CREDENTALS_ID;
    def SF_INSTANCE_URL ;        
    def TEST_LEVEL = "RunLocalTests";              
    def dirName = env.WORKSPACE;
	def buildToRollback;
	dirName = dirName.replace(JOB_NAME,'');
	

	if(evnRollBack == 'QA'){
        SF_CONSUMER_KEY          = env.SF_CONSUMER_KEY_QA;
        SF_USERNAME              = env.SF_USERNAME_QA;
        SERVER_KEY_CREDENTALS_ID = env.SERVER_KEY_CREDENTALS_ID_QA;
        SF_INSTANCE_URL          = env.SF_INSTANCE_URL_QA;
		buildToRollback          = "${dirName}QA Org/build/force-app_v${params.Build}"
	}else if(evnRollBack == 'Stage'){
        SF_CONSUMER_KEY          = env.SF_CONSUMER_KEY_STAGE;
        SF_USERNAME              = env.SF_USERNAME_STAGE;
        SERVER_KEY_CREDENTALS_ID = env.SERVER_KEY_CREDENTALS_ID_STAGE;
        SF_INSTANCE_URL          = env.SF_INSTANCE_URL_STAGE;	
		buildToRollback          = "${dirName}Stage Org/build/force-app_v${params.Build}"
	}else if(evnRollBack == 'Live'){
	    SF_CONSUMER_KEY          = env.SF_CONSUMER_KEY_LIVE;
        SF_USERNAME              = env.SF_USERNAME_LIVE;
        SERVER_KEY_CREDENTALS_ID = env.SERVER_KEY_CREDENTALS_ID_LIVE;
        SF_INSTANCE_URL          = env.SF_INSTANCE_URL_LIVE;
		buildToRollback          = "${dirName}QA Org/build/force-app_v${params.Build}"
	}
	
	println  "Envrnmenet Name :${params.Environment}";
	println  "Envrnmenet Name :${params.Build}";
    println dirName;
	println buildToRollback;
  
}

def command(script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script);
    } else {
        return bat(returnStatus: true, script: script);
    }
}

def commandOutput(script) {
    if (isUnix()) {
        rmsg =  sh(returnStdout: true, script: script);
    } else {
        rmsg =  bat(returnStdout: true, script: script);
        rmsg = rmsg.readLines().drop(1).join(" ");
    }
    def index = rmsg.indexOf('json') + 4;
    def len   = rmsg.length();
    def json  = rmsg.substring(index,len);
    println json;
    def jsonSlurper = new JsonSlurperClassic();
    def response = jsonSlurper.parseText(json);
    return response;
}
