#!groovy

import groovy.json.JsonSlurperClassic

node {
 
	def PASSWORD_SEL_VALID       = env.PASSWORD_SEL_VALID;	
    def SF_CONSUMER_KEY          = env.SF_CONSUMER_KEY_QA;         
    def SF_USERNAME              = env.SF_USERNAME_QA;           
    def SERVER_KEY_CREDENTALS_ID = env.SERVER_KEY_CREDENTALS_ID_QA;
    def SF_INSTANCE_URL          = env.SF_INSTANCE_URL_QA;        
    def TEST_LEVEL='RunLocalTests'
    def dirName = env.WORKSPACE;
	def WORKSPACE_NAME_QA        = env.WORKSPACE_NAME_QA;
	dirName = dirName.replace(JOB_NAME,'');

	def build_directory = "build/force-app_v_${env.BUILD_NUMBER}";
    def toolbelt = tool 'toolbelt'

    // -------------------------------------------------------------------------
    // Check out code from source control.
    // -------------------------------------------------------------------------

    stage('checkout source') {
        checkout scm
    }
	
	println 'after checkout source:'

	
	withEnv(["HOME=${env.WORKSPACE}"]) {
		
		withCredentials([file(credentialsId: SERVER_KEY_CREDENTALS_ID, variable: 'jwt_key_file')]) {
            
            /*Stage-1: Authorize DevHub Org*/

			stage('Authorize DevHub') {
                rc = command "\"${toolbelt}\" force:auth:logout -u ${SF_USERNAME} -p"
                rc = command "\"${toolbelt}\" force:auth:jwt:grant --instanceurl ${SF_INSTANCE_URL} --clientid ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --jwtkeyfile \"${jwt_key_file}\" --setdefaultdevhubusername --setalias HubOrg";
                if (rc != 0) {
                    error 'Salesforce dev hub org authorization failed.'
                }
                rc = command "\"${toolbelt}\" force:org:list"
            }

            /*Stage 2 Convert to the Org Metadata*/
            stage('Convert to Org Metadata'){
                 rc = command "\"${toolbelt}\" force:source:convert -r force-app -d ${build_directory}"
                if (rc != 0) {
                    error 'Convert Source Code to Org Metadata failed'
                }
            }

			
            /*Stage 3 Deploy Code to Org*/
            stage('Deploy Code'){
                rc = command "\"${toolbelt}\" force:mdapi:deploy -d ${build_directory}/. -u ${SF_USERNAME} -l ${TEST_LEVEL} -w -1"
                if (rc != 0) {
                    error 'Salesforce Code Deployment failed.'
                }
            }
			
			
			/*Stage 4 Execute Selenium Automation Suite*/
			stage('Execute Selenium Test Cases'){
                rc = build job: 'SeleniumTestNew', parameters: [string(name: 'URL_Name', value: "${SF_INSTANCE_URL}"), string(name: 'USER_NAME_VALID', value: "${SF_USERNAME}"), string(name: 'PASSWORD_VALID', value: "${PASSWORD_SEL_VALID}")];
            }		

             /*Stage 5 Deployement Status in Org */
             stage('Deploy Status Report'){
                rc = command "\"${toolbelt}\" force:mdapi:deploy:report -u ${SF_USERNAME}"
                if (rc != 0) {
                    error 'Unable to get the deployment status.'
                }
            }		
			
		}
	}
}

def command(script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script);
    } else {
        return bat(returnStatus: true, script: script);
    }
}
